//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using LitJson;
using UnityEngine;
using UnityEngine.UI;

namespace GraduationProject
{
	public struct ButtonsInfo
	{
		public Vector2 position;
		public Vector2 size;
		public float[] alpha;
		public float[] pivot;
		
		public ButtonsInfo (Vector2 pos, Vector2 si, float[] alp, float[] piv)
		{
			position = pos;
			size = si;
			alpha = alp;
			pivot = piv;
		}
	}

	public class AnimationLabel : BaseLabel
	{
		protected Vector2 moveAmount;
		protected Vector2 sizeAmount;
		protected float[] alphaAmount;

		public AnimationLabel ()
		{
		}

		public override void CreateMenuItem (Canvas canvas)
		{
			string[] filePath = JsonMapper.ToObject <string[]> (Json["filePath"].ToJson ());
			buttonImage = new Image[filePath.Length];
			rectTransform = new RectTransform[buttonImage.Length];
			alphaAmount = new float[buttonImage.Length];
			
			information = new ButtonsInfo ();
			information.position = new Vector2 ((float)((int)Json["position_x"]), (float)((int)Json["position_y"]));
			information.size = new Vector2 ((float)((int)Json["width"]), (float)((int)Json["height"]));
			information.alpha = JsonMapper.ToObject <float[]> (Json["alpha"].ToJson ());
			
			
			for (int i=0; i<buttonImage.Length; i++)
			{
				GameObject buttonObject = new GameObject ();
				buttonObject.name = filePath[i];
				buttonObject.transform.parent = canvas.transform;
				
				buttonImage[i] = buttonObject.AddComponent <Image> ();
				rectTransform[i] = buttonObject.GetComponent<RectTransform> ();
				buttonImage[i].sprite = Resources.Load (defaultPath+filePath[i], typeof(Sprite)) as Sprite;
				rectTransform[i].anchorMax = Vector2.zero;
				rectTransform[i].anchorMin = Vector2.zero;
				rectTransform[i].pivot = Vector2.zero;
				
				rectTransform[i].position = new Vector3 (information.position.x*ratio_width, information.position.y*ratio_height, 0f);
				rectTransform[i].sizeDelta = new Vector2 (information.size.x*ratio_width, information.size.y*ratio_height);
				buttonImage[i].color = new Color (1, 1, 1, 0f);
			}
		}

		public override void CreateMenuItem (Canvas canvas, ButtonsInfo info)
		{
			string[] filePath = JsonMapper.ToObject <string[]> (Json["filePath"].ToJson ());
			buttonImage = new Image[filePath.Length];
			rectTransform = new RectTransform[buttonImage.Length];
			alphaAmount = new float[buttonImage.Length];
			
			information = info;
			
			for (int i=0; i<buttonImage.Length; i++)
			{
				GameObject buttonObject = new GameObject ();
				buttonObject.name = filePath[i];
				buttonObject.transform.parent = canvas.transform;
				
				buttonImage[i] = buttonObject.AddComponent <Image> ();
				rectTransform[i] = buttonObject.GetComponent<RectTransform> ();
				buttonImage[i].sprite = Resources.Load (defaultPath+filePath[i], typeof(Sprite)) as Sprite;
				rectTransform[i].anchorMax = Vector2.zero;
				rectTransform[i].anchorMin = Vector2.zero;
				rectTransform[i].pivot = new Vector2 (information.pivot[0]/2f, information.pivot[1]/2f);
				
				rectTransform[i].position = new Vector3 (information.position.x*ratio_width, information.position.y*ratio_height, 0f);
				rectTransform[i].sizeDelta = new Vector2 (information.size.x*ratio_width, information.size.y*ratio_height);
				buttonImage[i].color = new Color (1, 1, 1, 0f);
			}
		}

		public virtual void CreateMenuItem (Canvas canvas, ButtonsInfo info, LabelInformation labelInfo, bool open)
		{
			string[] filePath = labelInfo.buttonImageFile;
			buttonImage = new Image[filePath.Length];
			rectTransform = new RectTransform[buttonImage.Length];
			alphaAmount = new float[buttonImage.Length];
			
			information = info;
			
			for (int i=0; i<buttonImage.Length; i++)
			{
				GameObject buttonObject = new GameObject ();
				buttonObject.name = filePath[i];
				buttonObject.transform.parent = canvas.transform;
				
				buttonImage[i] = buttonObject.AddComponent <Image> ();
				rectTransform[i] = buttonObject.GetComponent<RectTransform> ();
				if (open)
					buttonImage[i].sprite = Resources.Load (defaultPath+filePath[i], typeof(Sprite)) as Sprite;
				else
					buttonImage[i].sprite = Resources.Load (defaultPath+"stage_notpen", typeof(Sprite)) as Sprite;
				rectTransform[i].anchorMax = Vector2.zero;
				rectTransform[i].anchorMin = Vector2.zero;
				rectTransform[i].pivot = new Vector2 (information.pivot[0]/2f, information.pivot[1]/2f);
				
				rectTransform[i].position = new Vector3 (information.position.x*ratio_width, information.position.y*ratio_height, 0f);
				rectTransform[i].sizeDelta = new Vector2 (information.size.x*ratio_width, information.size.y*ratio_height);
				buttonImage[i].color = new Color (1, 1, 1, 0f);
			}
		}

		public virtual void StartAnimation (ButtonsInfo targetInfo, float time)
		{
			moveAmount = (targetInfo.position - information.position)/time;
			moveAmount = new Vector2 (moveAmount.x*ratio_width, moveAmount.y*ratio_height);
			sizeAmount = (targetInfo.size - information.size)/time;
			sizeAmount = new Vector2 (sizeAmount.x*ratio_width, sizeAmount.y*ratio_height);

			for (int i=0; i<alphaAmount.Length; i++)
			{
				alphaAmount[i] = (targetInfo.alpha[i] - buttonImage[i].color.a)/time;
			}

			information = targetInfo;
		}

		public void SetButtonsInfo (ButtonsInfo targetInf)
		{
			for (int i=0; i<buttonImage.Length; i++)
			{
				buttonImage[i].rectTransform.position = new Vector3 (targetInf.position.x, targetInf.position.y, 0f);
				buttonImage[i].rectTransform.sizeDelta = targetInf.size;
				buttonImage[i].color = new Color (buttonImage[i].color.r, buttonImage[i].color.g, buttonImage[i].color.b, targetInf.alpha[i]);
			}

			information = targetInf;
		}

		public virtual void StartAnimation (float[] targetAlpha, float time)
		{
			for (int i=0; i<alphaAmount.Length; i++)
			{
				alphaAmount[i] = (targetAlpha[i] - buttonImage[i].color.a)/time;
			}
		}

		public virtual void StartAnimation (float targetSize, float time)
		{
			//buttonImage[0].rectTransform.pivot = Vector2.one/2f;
			sizeAmount = (information.size*targetSize - information.size)/time;
		}

		public void ClearAmount ()
		{
			moveAmount = Vector2.zero;
			sizeAmount = Vector2.zero;

			for (int i=0; i<alphaAmount.Length; i++)
			{
				alphaAmount[i] = 0f;
			}
		}
		
		public override void ButtonAnimation ()
		{
			foreach (RectTransform transform in rectTransform)
			{
				if (Mathf.Abs (moveAmount.magnitude) > 0f)
				{
					transform.position += new Vector3 (moveAmount.x, moveAmount.y, 0);
				}

				if (Mathf.Abs (sizeAmount.magnitude) > 0f)
				{
					transform.sizeDelta += sizeAmount;
				}
			}

			for (int i=0; i<alphaAmount.Length; i++)
			{
				if (Mathf.Abs (alphaAmount[i]) > 0f)
				{
					buttonImage[i].color += new Color (buttonImage[i].color.r, buttonImage[i].color.g, buttonImage[i].color.b, alphaAmount[i]);
				}
			}
		}
	}
}

