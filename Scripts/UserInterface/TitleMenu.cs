//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using LitJson;

namespace GraduationProject
{
	public class TitleMenu : BaseMenu
	{
		public TitleMenu (Canvas canv, SoundManager soundMan) : base (canv, soundMan)
		{
			productionFile = "Data/TitleProduction";
		}

		public override List<BaseProduction> GetProductionList ()
		{
			TextAsset jsonAsset = Resources.Load (productionFile, typeof(TextAsset)) as TextAsset;
			JsonData[] jsonArray = JsonMapper.ToObject<JsonData[]> (jsonAsset.text);

			List<BaseProduction> list = new List<BaseProduction> ();

			foreach (JsonData data in jsonArray)
			{
				Type type = Type.GetType ("GraduationProject." + (string)data["ProductionType"]);
				if (type != null)
				{
					BaseProduction production = (BaseProduction)Activator.CreateInstance (type);
					production.Json = data;
					list.Add (production);
				}
			}

			return list;
		}

		public override void CreateBackGround ()
		{
			counter = 30;
			
			TextAsset jsonAsset = Resources.Load ("Data/TitleUIData", typeof(TextAsset)) as TextAsset;
			JsonData jsonData = JsonMapper.ToObject (jsonAsset.text);
			
			cursor = new Cursor ();
			cursor.Json = jsonData["cursor"];
			cursor.CreateMenuItem (canvas);
			cursor.StartAnimation (new float[1] {1}, (float)counter);
			labelList.Add (cursor);

			explanatoryText = new ChangeLabel ();
			explanatoryText.Json = jsonData["explanatoryText"];
			explanatoryText.CreateMenuItem (canvas);
			explanatoryText.StartAnimation (new float[1] {1}, (float)counter);
			labelList.Add (explanatoryText);
			
			JsonData[] jsonArray = JsonMapper.ToObject<JsonData[]> (jsonData["labels"].ToJson ());
			foreach (JsonData array in jsonArray)
			{
				AnimationLabel label = new AnimationLabel ();
				label.Json = array;
				labelList.Add (label);
				label.CreateMenuItem (canvas);
				label.StartAnimation (new float[1] {1}, (float)counter);
			}
			
			JsonData data = jsonData["buttonInfo"];
			jsonArray = JsonMapper.ToObject<JsonData[]> (jsonData["buttons"].ToJson ());

			buttonsInfo = new ButtonsInfo[jsonArray.Length+1];
			cursor.max_number = buttonsInfo.Length;
			cursor.select = 2;

			for (int i=0; i<buttonsInfo.Length; i++)
			{
				buttonsInfo[i].position = new Vector2 ((int)data["position_x"]+(int)data["distance_x"]*i, (int)data["position_y"]+(int)data["distance_y"]*i);
				buttonsInfo[i].size = new Vector2 ((int)data["width"], (int)data["height"]);
				buttonsInfo[i].alpha = JsonMapper.ToObject<float[]> (data["alpha"].ToJson ());
				buttonsInfo[i].pivot = JsonMapper.ToObject<float[]> (data["pivot"].ToJson ());
			}

			buttonsInfo[2].size = new Vector2 ((int)data["select_width"], (int)data["select_height"]);
			buttonsInfo[2].alpha = JsonMapper.ToObject<float[]> (data["select_alpha"].ToJson ());
			buttonsInfo[0].alpha = new float[2] {0,0};
			buttonsInfo[buttonsInfo.Length-1].alpha = new float[2] {0,0};

			for (int i=0; i<2; i++)
			{
				AnimationButton button = new AnimationButton ();
				button.Json = jsonArray[jsonArray.Length-1-i];
				buttonList.Add (button);
				button.CreateMenuItem (canvas, buttonsInfo[i]);
				button.StartAnimation (buttonsInfo[i], (float)counter);
				button.order = i;
			}

			for (int i=0; i<jsonArray.Length-1; i++)
			{
				AnimationButton button = new AnimationButton ();
				button.Json = jsonArray[i];
				buttonList.Add (button);
				button.CreateMenuItem (canvas, buttonsInfo[i+2]);
				button.StartAnimation (buttonsInfo[i+2], (float)counter);
				button.order = i+2;
			}

			explanatoryText.ChangeSprite (buttonList[cursor.select].id);
		}
		
		public override void Execute (InputManager inputManager, IProductionObserver observer)
		{
			if (counter > 0)
			{
				counter --;
				/*cursor.ButtonAnimation ();
				explanatoryText.ButtonAnimation ();
				if (counter == 0)
				{
					cursor.ClearAmount ();
					explanatoryText.ClearAmount ();
				}*/
				foreach (AnimationLabel lab in labelList)
				{
					lab.ButtonAnimation ();
					if (counter == 0) lab.ClearAmount ();
				}

				foreach (AnimationButton button in buttonList)
				{
					button.ButtonAnimation ();
					if (counter == 0) button.ClearAmount ();
				}
			}
			else
			{
				if (isDelete)
				{
					Delete ();
					observer.NextMenu ();
					return;
				}

				if (inputManager.StickUD == 1)
				{
					cursor.ChangeSelect (-1);
					ChangeEvent (1);
				}
				else if (inputManager.StickUD == -1)
				{
					cursor.ChangeSelect (1);
					ChangeEvent (-1);
				}

				if (inputManager.DecisionButton == 1)
				{
					ButtonEvent ();
				}

				if (inputManager.CancelButton == 1)
					CancelEvent ();
			}
		}
		
		public override void ChangeEvent (int var)
		{
			counter = 20;
			for (int i=0; i<buttonList.Count; i++)
			{
				int after = buttonList[i].order + var;

				if (after < 0) after = buttonsInfo.Length-1;
				if (after >= buttonsInfo.Length) after = 0;

				buttonList[i].StartAnimation (buttonsInfo[after], (float)counter);
				buttonList[i].order = after;
			}

			explanatoryText.ChangeSprite (buttonList[cursor.select].id);
			soundManager.PlaySE (1);
		}
		
		public override void ButtonEvent ()
		{
			counter = 20;
			for (int i=0; i<buttonList.Count; i++)
			{	
				if (i == cursor.select) buttonList[i].StartAnimation (2f, (float)counter);

				buttonList[i].StartAnimation (new float[2] {0f, 0f}, (float)counter);
			}

			foreach (AnimationLabel label in labelList)
				label.StartAnimation (new float[2] {0f, 0f}, (float)counter);

			switch (buttonList[cursor.select].id)
			{
			case	0:
				nextMenu = new CharacterSelectMenu (canvas, soundManager);
				break;
			case	1:
				nextMenu = new CharacterSelectMenu (canvas, soundManager);
				break;
			case	2:
				nextMenu = new GalleryMenu (canvas, soundManager);
				break;
			case	3:
				nextMenu = new CreditMenu (canvas, soundManager);
				break;
			case	4:
				Application.Quit ();
				break;
			}
			soundManager.PlaySE (0);
			isDelete = true;
		}

		public override void CancelEvent ()
		{
			Application.LoadLevel ("TitleScene");
		}
	}
}

