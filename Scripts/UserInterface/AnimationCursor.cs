//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using LitJson;
using UnityEngine;
using UnityEngine.UI;

namespace GraduationProject
{
	public class AnimationCursor : Cursor
	{
		public AnimationCursor () : base ()
		{
		}

		public override void CreateMenuItem (Canvas canvas)
		{
			string[] filePath = JsonMapper.ToObject <string[]> (Json["filePath"].ToJson ());
			buttonImage = new Image[filePath.Length];
			rectTransform = new RectTransform[buttonImage.Length];
			alphaAmount = new float[buttonImage.Length];
			
			information = new ButtonsInfo ();
			information.position = new Vector2 ((float)((int)Json["position_x"]), (float)((int)Json["position_y"]));
			information.size = new Vector2 ((float)((int)Json["width"]), (float)((int)Json["height"]));
			information.alpha = JsonMapper.ToObject <float[]> (Json["alpha"].ToJson ());
			information.pivot = JsonMapper.ToObject <float[]> (Json["pivot"].ToJson ());
			
			for (int i=0; i<buttonImage.Length; i++)
			{
				GameObject buttonObject = new GameObject ();
				buttonObject.name = filePath[i];
				buttonObject.transform.parent = canvas.transform;
				
				buttonImage[i] = buttonObject.AddComponent <Image> ();
				rectTransform[i] = buttonObject.GetComponent<RectTransform> ();
				buttonImage[i].sprite = Resources.Load (defaultPath+filePath[i], typeof(Sprite)) as Sprite;
				rectTransform[i].anchorMax = Vector2.zero;
				rectTransform[i].anchorMin = Vector2.zero;
				rectTransform[i].pivot = new Vector2 (information.pivot[0]/2f, information.pivot[1]/2f);
				
				rectTransform[i].position = new Vector3 (information.position.x*ratio_width, information.position.y*ratio_height, 0f);
				rectTransform[i].sizeDelta = new Vector2 (information.size.x*ratio_width, information.size.y*ratio_height);
				buttonImage[i].color = new Color (1, 1, 1, 0f);
			}
		}
				
		public void SetCursorPosition (Vector3 pos)
		{
			for (int i=0; i<buttonImage.Length; i++)
			{
				buttonImage[i].rectTransform.position = pos;
			}
		}

		public virtual void CursorAnimation ()
		{
			for (int i=0; i<buttonImage.Length; i++)
			{
				float alpha = Mathf.PingPong (Time.time, 1.5f)/3f + 0.5f;
				buttonImage[i].color = new Color (1, 1, 1, alpha);
			}
		}
	}
}

