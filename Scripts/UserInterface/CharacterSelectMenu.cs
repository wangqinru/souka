//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using LitJson;

namespace GraduationProject
{
	public class CharacterSelectMenu : BaseMenu
	{
		private StatusLabel statusLabel;

		public CharacterSelectMenu (Canvas canv, SoundManager soundMan) : base (canv, soundMan)
		{
			productionFile = "Data/CharacterSelectProduction";
		}

		public override List<BaseProduction> GetProductionList ()
		{
			TextAsset jsonAsset = Resources.Load (productionFile, typeof(TextAsset)) as TextAsset;
			JsonData[] jsonArray = JsonMapper.ToObject<JsonData[]> (jsonAsset.text);
			
			List<BaseProduction> list = new List<BaseProduction> ();
			
			foreach (JsonData data in jsonArray)
			{
				Type type = Type.GetType ("GraduationProject." + (string)data["ProductionType"]);
				if (type != null)
				{
					BaseProduction production = (BaseProduction)Activator.CreateInstance (type);
					production.Json = data;
					list.Add (production);
				}
			}
			
			return list;
		}

		public override void CreateBackGround ()
		{
			counter = 30;
			
			TextAsset jsonAsset = Resources.Load ("Data/CharacterSelectUIData", typeof(TextAsset)) as TextAsset;
			JsonData jsonData = JsonMapper.ToObject (jsonAsset.text);
			
			cursor = new Cursor ();
			cursor.Json = jsonData["cursor"];
			cursor.CreateMenuItem (canvas);
			cursor.StartAnimation (new float[1] {1}, (float)counter);
			labelList.Add (cursor);

			explanatoryText = new ChangeLabel ();
			explanatoryText.Json = jsonData["explanatoryText"];
			labelList.Add (explanatoryText);

			string[] files = new string[dataManager.characterData.Length];
			for (int i=0; i<files.Length; i++)
			{
				if (dataManager.characterData[i].open)
					files[i] = dataManager.characterData[i].labelInfo.stageImageFile;
				else
					files[i] = "silhouette";
			}	

			explanatoryText.CreateVariableItem (canvas, files);
			explanatoryText.StartAnimation (new float[1] {1}, (float)counter);

			statusLabel = new StatusLabel (dataManager.characterData);
			statusLabel.Json = jsonData["StatusLabel"];
			statusLabel.CreateMenuItem (canvas);
			statusLabel.StartAnimation (new float[1] {1}, (float)counter);
			labelList.Add (statusLabel);
			
			JsonData[] jsonArray = JsonMapper.ToObject<JsonData[]> (jsonData["labels"].ToJson ());
			foreach (JsonData array in jsonArray)
			{
				AnimationLabel label = new AnimationLabel ();
				label.Json = array;
				labelList.Add (label);
				label.CreateMenuItem (canvas);
				label.StartAnimation (new float[1] {1}, (float)counter);
			}
			
			JsonData data = jsonData["buttonInfo"];
			buttonsInfo = new ButtonsInfo[dataManager.characterData.Length+2];
			cursor.max_number = buttonsInfo.Length;
			cursor.select = 2;
			
			for (int i=0; i<buttonsInfo.Length; i++)
			{
				buttonsInfo[i].position = new Vector2 ((int)data["position_x"]+(int)data["distance_x"]*i, (int)data["position_y"]+(int)data["distance_y"]*i);
				buttonsInfo[i].size = new Vector2 ((int)data["width"], (int)data["height"]);
				buttonsInfo[i].alpha = JsonMapper.ToObject<float[]> (data["alpha"].ToJson ());
				buttonsInfo[i].pivot = JsonMapper.ToObject<float[]> (data["pivot"].ToJson ());
			}
			
			buttonsInfo[2].size = new Vector2 ((int)data["select_width"], (int)data["select_height"]);
			buttonsInfo[2].alpha = JsonMapper.ToObject<float[]> (data["select_alpha"].ToJson ());
			buttonsInfo[0].alpha = new float[2] {0,0};
			buttonsInfo[buttonsInfo.Length-1].alpha = new float[2] {0,0};

			for (int i=0; i<2; i++)
			{
				AnimationButton button = new AnimationButton ();
				buttonList.Add (button);
				button.SetID (dataManager.characterData.Length-i-1);
				button.CreateMenuItem (canvas, buttonsInfo[i], 
				                       dataManager.characterData[dataManager.characterData.Length-i-1].labelInfo, 
				                       dataManager.characterData[dataManager.characterData.Length-i-1].open);
				button.StartAnimation (buttonsInfo[i], (float)counter);
				button.order = i;
			}


			for (int i=0; i<dataManager.characterData.Length; i++)
			{
				AnimationButton button = new AnimationButton ();
				buttonList.Add (button);
				button.SetID (i);
				button.CreateMenuItem (canvas, buttonsInfo[i+2], dataManager.characterData[i].labelInfo, dataManager.characterData[i].open);
				button.StartAnimation (buttonsInfo[i+2], (float)counter);
				button.order = i+2;
			}
			
			explanatoryText.ChangeSprite (buttonList[cursor.select].id);
		}
		
		public override void Execute (InputManager inputManager, IProductionObserver observer)
		{
			if (counter > 0)
			{
				counter --;

				foreach (AnimationLabel lab in labelList)
				{
					lab.ButtonAnimation ();
					if (counter == 0) lab.ClearAmount ();
				}
				
				foreach (AnimationButton button in buttonList)
				{
					button.ButtonAnimation ();
					if (counter == 0) button.ClearAmount ();
				}
			}
			else
			{
				if (isDelete)
				{
					Delete ();
					observer.NextMenu ();
					return;
				}
				
				if (inputManager.StickUD == 1)
				{
					cursor.ChangeSelect (1);
					ChangeEvent (-1);
					
					explanatoryText.ChangeSprite (buttonList[cursor.select].id);
				}
				else if (inputManager.StickUD == -1)
				{
					cursor.ChangeSelect (-1);
					ChangeEvent (1);
					
					explanatoryText.ChangeSprite (buttonList[cursor.select].id);
				}
				
				if (inputManager.DecisionButton == 1)
				{
					ButtonEvent ();
				}

				if (inputManager.CancelButton == 1)
				{
					CancelEvent ();
					observer.Rewind (6);
				}
			}
		}
		
		public override void ChangeEvent (int var)
		{
			counter = 20;
			for (int i=0; i<buttonList.Count; i++)
			{
				int after = buttonList[i].order + var;
				
				if (after < 0) after = buttonsInfo.Length-1;
				if (after >= buttonsInfo.Length) after = 0;
				
				buttonList[i].StartAnimation (buttonsInfo[after], (float)counter);
				buttonList[i].order = after;
			}

			explanatoryText.ChangeSprite (buttonList[cursor.select].id);
			statusLabel.ChangeSprite (buttonList [cursor.select].id);
			soundManager.PlaySE (1);
		}
		
		public override void ButtonEvent ()
		{
			if (dataManager.characterData[buttonList [cursor.select].id].open)
			{
				counter = 30;
				for (int i=0; i<buttonList.Count; i++)
				{	
					if (cursor.select == i) buttonList[i].StartAnimation (2f, (float)counter);
					buttonList[i].StartAnimation (new float[2] {0f, 0f}, (float)counter);
				}
				labelList.Remove (explanatoryText);
				labelList.Remove (statusLabel);

				foreach (AnimationLabel label in labelList)
					label.StartAnimation (new float[2] {0f, 0f}, (float)counter);

				dataManager.freeModeData.characterSelectNumber = buttonList[cursor.select].id;
				nextMenu = new StageSelectMenu (canvas, soundManager);
				isDelete = true;

				soundManager.PlaySE (0);
			}
			else
				soundManager.PlaySE (3);
		}

		public override void CancelEvent ()
		{
			nextMenu = new TitleMenu (canvas, soundManager);
			soundManager.PlaySE (2);
		}
	}
}

