//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using LitJson;
using UnityEngine;
using UnityEngine.UI;

namespace GraduationProject
{
	public class StatusLabel : ChangeLabel
	{
		private CharacterData[] characters;

		private Image nameImage;
		private Text level;
		private Image[] statusImage;

		private Sprite[] nameSprites;

		private List<Image> imageList;
		public StatusLabel (CharacterData[] charas) : base ()
		{
			characters = charas;
			statusImage = new Image[3];
		}

		public override void CreateMenuItem (Canvas canvas)
		{
			imageList = new List<Image> ();
			nameSprites = new Sprite[characters.Length];

			for (int i=0; i<characters.Length; i++)
				nameSprites[i] = Resources.Load (defaultPath+characters[i].labelInfo.buttonImageFile[0], typeof(Sprite)) as Sprite;

			buttonImage = new Image[1];
			rectTransform = new RectTransform[buttonImage.Length];
			alphaAmount = new float[buttonImage.Length];
			
			information = new ButtonsInfo ();
			float[] array = JsonMapper.ToObject <float[]> (Json["position"].ToJson ());
			information.position = new Vector2 (array[0], array[1]);

			array = JsonMapper.ToObject <float[]> (Json["size"].ToJson ());
			information.size = new Vector2 (array[0], array[1]);
			information.alpha = JsonMapper.ToObject <float[]> (Json["alpha"].ToJson ());
			
			GameObject buttonObject = new GameObject ();
			buttonObject.name = (string)Json["filePath"];
			buttonObject.transform.parent = canvas.transform;
			
			buttonImage[0] = buttonObject.AddComponent <Image> ();
			rectTransform[0] = buttonObject.GetComponent<RectTransform> ();
			buttonImage[0].sprite = Resources.Load (defaultPath+(string)Json["filePath"], typeof (Sprite)) as Sprite;
			rectTransform[0].anchorMax = Vector2.zero;
			rectTransform[0].anchorMin = Vector2.zero;
			rectTransform[0].pivot = Vector2.zero;
			
			rectTransform[0].position = new Vector3 (information.position.x*ratio_width, information.position.y*ratio_height, 0f);
			rectTransform[0].sizeDelta = new Vector2 (information.size.x*ratio_width, information.size.y*ratio_height);
			buttonImage[0].color = new Color (1, 1, 1, 0f);

			imageList.Add (buttonImage [0]);

			GameObject obj = new GameObject ();
			obj.name = "name";
			obj.transform.parent = buttonImage[0].gameObject.transform;

			nameImage = obj.AddComponent<Image> ();
			nameImage.sprite = nameSprites[0];
			RectTransform rectTran = nameImage.GetComponent<RectTransform> ();
			rectTran.anchorMax = Vector2.zero;
			rectTran.anchorMin = Vector2.zero;
			rectTran.pivot = Vector2.zero;

			imageList.Add (nameImage);

			float[] pos = JsonMapper.ToObject <float[]> (Json["name_position"].ToJson ());
			rectTran.position = new Vector3 (rectTransform[0].position.x+pos[0]*ratio_width, rectTransform[0].position.y+pos[1]*ratio_height, 0f);
			float[] size = JsonMapper.ToObject <float[]> (Json["name_size"].ToJson ());
			rectTran.sizeDelta = new Vector2 (size[0]*ratio_width, size[1]*ratio_height);
			nameImage.color = new Color (1, 1, 1, 0f);

			GameObject temp = Resources.Load ("Prefabs/Text_outline", typeof(GameObject)) as GameObject;
			obj = MonoBehaviour.Instantiate (temp) as GameObject;
			obj.transform.SetParent (buttonImage[0].gameObject.transform);
			obj.name = "level";

			level = obj.GetComponent<Text> ();
			level.text = characters[0].status.level.ToString ();
			level.fontSize = (int)(((float)(int)Json["font_size"])*ratio_width);

			pos = JsonMapper.ToObject <float[]> (Json["font_position"].ToJson ());
			size = JsonMapper.ToObject <float[]> (Json["font_color"].ToJson ());

			level.rectTransform.position = new Vector3 (rectTransform[0].position.x+pos[0]*ratio_width, rectTransform[0].position.y+pos[1]*ratio_height, 0f);
			level.color = new Color (size[0]/255f, size[1]/255f, size[2]/255f, 0f);

			float[] charaStatus = new float[3] {
								characters [0].status.hp,
								characters [0].status.attack,
								characters [0].status.defense
						};

			statusImage = new Image[3];
			for (int i=0; i<statusImage.Length; i++)
			{
				GameObject gaugeObject = new GameObject ();
				gaugeObject.name = "gauge00"+i.ToString ();
				gaugeObject.transform.parent = buttonImage[0].gameObject.transform;

				statusImage[i] = gaugeObject.AddComponent<Image> ();
				statusImage[i].sprite = Resources.Load (defaultPath+(string)Json["gauge_name"],typeof (Sprite)) as Sprite;

				rectTran = gaugeObject.GetComponent<RectTransform> ();
				rectTran.anchorMax = Vector2.zero;
				rectTran.anchorMin = Vector2.zero;
				rectTran.pivot = Vector2.zero;

				pos = JsonMapper.ToObject <float[]> (Json["gauge_position"].ToJson ());
				size = JsonMapper.ToObject <float[]> (Json["gauge_size"].ToJson ());
				float[] dis = JsonMapper.ToObject <float[]> (Json["distance"].ToJson ());

				rectTran.position = new Vector3 (rectTransform[0].position.x+pos[0]*ratio_width, rectTransform[0].position.y+pos[1]*ratio_height, 0f);
				rectTran.position += new Vector3 (i*dis[0]*ratio_width, i*dis[1]*ratio_height, 0f);
				rectTran.sizeDelta = new Vector2 (size[0]*ratio_width, size[1]*ratio_height);

				statusImage[i].type = Image.Type.Filled;
				statusImage[i].fillMethod = Image.FillMethod.Horizontal;
				statusImage[i].fillAmount = charaStatus[i]/999f;

				statusImage[i].color = new Color (1, 1, 1, 0f);

				imageList.Add (statusImage[i]);
			}

		}

		public override void ButtonAnimation ()
		{
			foreach (Image image in imageList)
			{
				RectTransform rectTransform = image.GetComponent<RectTransform> ();

				if (Mathf.Abs (moveAmount.magnitude) > 0f)
					rectTransform.position += new Vector3 (moveAmount.x, moveAmount.y, 0);

				if (Mathf.Abs (sizeAmount.magnitude) > 0f)
					rectTransform.sizeDelta += sizeAmount;

				if (Mathf.Abs (alphaAmount[0]) > 0f)
				{
					image.color += new Color (buttonImage[0].color.r, buttonImage[0].color.g, buttonImage[0].color.b, alphaAmount[0]);
					level.color += new Color (buttonImage[0].color.r, buttonImage[0].color.g, buttonImage[0].color.b, alphaAmount[0]);
				}
			}
		}

		public override void ChangeSprite (int index)
		{
			if (characters[index].open)
			{
				nameImage.sprite = nameSprites[index];
				nameImage.color = new Color (1, 1, 1, 1);

				level.text = characters[index].status.level.ToString ();
				level.color = new Color (1, 1, 1, 1);
				float[] charaStatus = new float[3] {
					characters [index].status.hp,
					characters [index].status.attack,
					characters [index].status.defense
				};
		
				for (int i=0; i<statusImage.Length; i++)
				{
					statusImage[i].fillAmount = charaStatus[i]/999f;
					statusImage[i].color = new Color (1, 1, 1, 1);
				}
			}
			else
			{
				nameImage.color = new Color (1, 1, 1, 0);
				level.color = new Color (1, 1, 1, 0);

				for (int i=0; i<statusImage.Length; i++)
					statusImage[i].color = new Color (1, 1, 1, 0);
			}
		}
	}
}