//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using UnityEngine.UI;

namespace GraduationProject
{
	public class EnemyInformation 
	{
		public int hp;
		public int moveSpeed;
		public int attack;
		public int range;
		public float pushForce_z = 0f;
		public float pushForce_y = 0f;

		public Animator animator;
		public PlayerController player;
		public Transform transform;
		public Vector3 pushDirection;

		public EnemyInformation (Animator a, PlayerController p, Transform t)
		{
			animator = a; 
			player = p;
			transform = t;
		}
	}

	public class ArtificialIntelligenceStage
	{
		protected float pushSpeed = 0f;
		protected float velocity = 0f;
		protected float gravity = 0f;
		protected float speed = 0f;
		protected float timeCounter = 0f;

		protected float ACCELE = 3.5f;
		protected float GRAVITY_ = 10.0f;

		protected EnemyInformation enemyInfo;

		public Vector3 targetPosition {get; set;}
		public bool isGrounded {get; set;}

		public ArtificialIntelligenceStage nextState {get; protected set;}

		public ArtificialIntelligenceStage ()
		{
		}

		public ArtificialIntelligenceStage (EnemyInformation Info)
		{
			enemyInfo = Info;
		}

		public virtual Vector3 Run ()
		{
			return Vector3.zero;
		}

		protected virtual void UseGravity ()
		{
			if (isGrounded)
			{
				if (velocity < 0f)
				{
					velocity = 0f;
					gravity = GRAVITY_;
				}
			}
			else
			{
				/*pushForce_y -= GRAVITY_*Time.deltaTime;
			if (pushForce_y < 0f && pushForce_y > -1f) 
			{
				gravity = 0f;
			}

			velocity -= gravity*Time.deltaTime;
			gravity += ACCELE;*/
				
				//まず与えられたY方向の力を減る
				if (enemyInfo.pushForce_y > 0f)
				{
					enemyInfo.pushForce_y -= GRAVITY_*Time.deltaTime;
					velocity = enemyInfo.pushForce_y;
				}
				//Y方向の力がなくなったら下降し始める
				else   
				{
					velocity -= gravity*Time.deltaTime;
					gravity += ACCELE;
				}
			}
		}

		protected float GetDistance ()
		{
			return (enemyInfo.player.transform.position - enemyInfo.transform.position).magnitude;
		}

		public virtual void Push (float forceZ, float forceY, Vector3 pushDir)
		{
			//if (HP <= 0) return;
			enemyInfo.pushForce_z = forceZ;
			enemyInfo.pushForce_y = forceY;
			gravity = 0f;
			enemyInfo.pushDirection = pushDir;
			enemyInfo.pushDirection = new Vector3 (enemyInfo.pushDirection.x, 0f, enemyInfo.pushDirection.z);
			enemyInfo.pushDirection = enemyInfo.pushDirection.normalized;
		}

		public virtual void Damage (int damage, CaptainEnemy captain, EnemyController enemy)
		{
			//if (HP <= 0) return;
			
			enemyInfo.hp -= damage;
			if (enemyInfo.hp <= 0)
			{
				if (captain != null) captain.RemoveAbeSan (enemy);
				enemyInfo.hp = 0;
			}
	
			if (enemyInfo.pushForce_y > 0)
				enemyInfo.animator.Play ("Down");
			else
			{
				AnimatorStateInfo nowState = enemyInfo.animator.GetCurrentAnimatorStateInfo (0);
				if (nowState.IsName ("Damage"))
					enemyInfo.animator.Play ("Damage_2");
				else
					enemyInfo.animator.Play ("Damage");
			}

			nextState = new AnomalyState (enemyInfo);
			//nextState.Push (pushForce_z, pushForce_y, pushDirection);
		}

		public virtual void StateEvent ()
		{
		}
	}
}

